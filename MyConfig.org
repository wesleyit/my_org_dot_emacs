#+TAGS: enabled noexport has_children

* My Emacs Configuration
  
** Intro 							    :enabled:

After reading some articles about [[https://en.wikipedia.org/wiki/Literate_programming][Literate Programming]], 
I decided to migrate my Emacs dot files to something more well [Org]anized.

There is no better tool to do this job than Org-mode. Emacs Rocks!


** About Me							    :enabled:

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Wesley R. da Silva"
      user-mail-address "wesley.it@gmail.com")
#+END_SRC


** Emacs Behaviors						    :enabled:

This is a HUGE text editor, you know. There are lots of behaviors that we
can change, and those little things stacked can make your day happiest.

#+BEGIN_SRC emacs-lisp
;; Change the backups directory when enabled, buuuut...
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; Disable backup for now and
(setq backup-inhibited t)

;; disable auto save too
(setq auto-save-default nil)

;; disable the session
(desktop-save-mode -1)

;; Changes all yes/no questions to y/n
(fset 'yes-or-no-p 'y-or-n-p)

;; Hide splash-screen and startup-message
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)

;; The default buffer will be org mode
(setq initial-major-mode 'org-mode)

;; A nice message for a nice developer :-)
(setq initial-scratch-message 
  (concat "## Happy hacking, " (or user-login-name "") " - Emacs loves you! ##\n\n"))

;; I don't want those ugly temp buffers
(use-package popwin
  :ensure t
  :config
  (popwin-mode 1))
(setq display-buffer-function 'popwin:display-buffer)

;; Uncomment to enable HELM in popwin
;;(push '("^\*helm .+\*$" :regexp t) popwin:special-display-config)
;;(push '("^\*helm-.+\*$" :regexp t) popwin:special-display-config)

;; Uncomment to disable the messages buffer
;;(setq-default message-log-max nil)
;;(kill-buffer "*Messages*")
(add-hook 'minibuffer-exit-hook
  '(lambda ()
    (let ((buffer "*Completions*"))
      (and (get-buffer buffer)
        (kill-buffer buffer)))))

;; I wanna use multiple cursors.
(use-package multiple-cursors 
  :ensure t
  :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click))

;; Opens my TODO list on startup
(find-file "~/Documents/Wesley.org")
#+END_SRC


** Global Minor Modes						    :enabled:

There are plenty of good modes which cannot run globally.
I would like to have colors, autocomplete, line numbers and many
others nice features for all my buffers.

This section is where those modes are configured to run as global
modes, in all buffers.

#+BEGIN_SRC emacs-lisp
;; There are some local modules that I think they should
;; be on every buffer. In this section I declare them as global...
(use-package rainbow-mode :ensure t)
(use-package projectile :ensure t :config (projectile-global-mode))

(define-globalized-minor-mode g-rainbow-mode rainbow-mode rainbow-mode)
(define-globalized-minor-mode g-electric-pair-mode electric-pair-mode electric-pair-mode)
(define-globalized-minor-mode g-show-paren-mode show-paren-mode show-paren-mode)
(define-globalized-minor-mode g-which-function-mode which-function-mode which-function-mode)
(define-globalized-minor-mode g-delete-selection-mode delete-selection-mode delete-selection-mode)
(define-globalized-minor-mode g-hl-line-mode hl-line-mode hl-line-mode)

;;... and here I call them to initialize with Emacs.
(g-rainbow-mode t) ;; colored named colors
(g-electric-pair-mode t) ;; autoclose quotes, braces, etc.
(g-show-paren-mode t) ;; highlight pairs of parenthesis
(g-which-function-mode t) ;; show in which function the cursor is in
(g-delete-selection-mode t) ;; delete or replace selected text
(g-hl-line-mode t) ;; highlight the current line
#+END_SRC


** Look and Feel and User Interface 				    :enabled:

Is very important to have a nice environment to work.
Lets enable a dark theme, a nice font face and a new
status bar with a beautiful theme.

#+BEGIN_SRC emacs-lisp
;; A Dark theme to remember my old terminal
(use-package dash :ensure t)
(use-package molokai-theme :ensure t
  :config
  (load-theme 'molokai))
(set-face-background 'hl-line "#1A1A1A")
(set-background-color "#000000")

;; This font is awesome!
(set-face-attribute 'default nil 
  :family "Source Code Pro for Powerline" 
  :height 160)

;; We want a well informative status line
(global-linum-mode t)
(column-number-mode 1)
(display-time)

;; The window goes to fullscreen after load
(toggle-frame-fullscreen)

;; No bars, no menus, no scrolls
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)

(use-package smart-mode-line
  :ensure t
  :config
  (setq sml/theme 'respectful)
  (sml/setup))
#+END_SRC


** Autocomplete Features				       :has_children:
   
*** helm							   :noexport:

Helm is a different way to deal with M-x menu and completions.
It uses a powerful engine with fuzzy search and autocomplete.

#+BEGIN_SRC emacs-lisp :noexport
;; We are using HELM to M-x
(use-package helm
  :ensure t
  :config
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  (require 'helm-config)
  (global-set-key (kbd "C-c M-x")     'execute-extended-command) ; old M-x
  (global-set-key (kbd "C-x C-d")     'helm-browse-project)
  (global-set-key (kbd "C-h C-f")     'helm-apropos)
  (global-set-key (kbd "C-h r")       'helm-info-emacs)
  (global-set-key (kbd "C-h i")       'helm-info-at-point)
  (global-set-key (kbd "C-:")         'helm-eval-expression-with-eldoc)
  (global-set-key (kbd "C-,")         'helm-calcul-expression)
  (global-set-key (kbd "C-x C-b")     'helm-buffers-list)
  (global-set-key (kbd "C-c f")       'helm-recentf)
  (global-set-key (kbd "C-x C-f")     'helm-find-files)
  (global-set-key (kbd "M-x")         'helm-M-x)
  (global-set-key (kbd "M-y")         'helm-show-kill-ring)
  (global-set-key (kbd "C-c i")       'helm-imenu)
  (global-set-key (kbd "C-x b")       'helm-mini)
  (global-set-key (kbd "C-x C-f")     'helm-find-files)
  (global-set-key (kbd "C-c h o")     'helm-occur)
  (define-key global-map [remap jump-to-register]      'helm-register)
  (define-key global-map [remap list-buffers]          'helm-buffers-list)
  (define-key global-map [remap dabbrev-expand]        'helm-dabbrev)
  (define-key global-map [remap find-tag]              'helm-etags-select)
  (define-key global-map [remap xref-find-definitions] 'helm-etags-select)
  (helm-adaptive-mode t)
  (helm-mode 1))
#+END_SRC


*** auto-complete						   :noexport:

Auto-complete is one of the most importants completion engines for Emacs.
It is newer than Company and have some nice features to Python and Ruby.

#+BEGIN_SRC emacs-lisp
;; Default Autocomplete config
;;(use-package auto-complete
;;:ensure t)
;;(ac-config-default)
;;(ac-config-default)
;;(ac-flyspell-workaround)

;;(global-auto-complete-mode t)
;;(setq ac-auto-show-menu t)
;;(setq ac-dwim t)
;;(setq ac-use-menu-map t)
;;(setq ac-quick-help-delay 1)
;;(setq ac-quick-help-height 60)
;;(setq ac-disable-inline t)
;;(setq ac-show-menu-immediately-on-auto-complete t)
;;(setq ac-auto-start 2)
;;(setq ac-candidate-menu-min 0)

;;(set-default 'ac-sources
;;  '(ac-source-dictionary
;;  ac-source-words-in-buffer
;;  ac-source-words-in-same-mode-buffers
;;  ac-source-semantic
;;  ac-source-yasnippet))

;;(dolist (mode '(magit-log-edit-mode log-edit-mode org-mode text-mode haml-mode python-mode
;;                sass-mode yaml-mode csv-mode espresso-mode haskell-mode dockerfile-mode
;;                html-mode nxml-mode sh-mode smarty-mode clojure-mode ansible-mode
;;                lisp-mode textile-mode markdown-mode tuareg-mode css-mode))
;;  (add-to-list 'ac-modes mode))
#+END_SRC


*** company							    :enabled:

Company is the oldest and most used complete engine for Emacs.
Is is very powerful and is backend-based: you can enable multiples
backends to improve the completion features.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :commands global-company-mode
  :init (progn
    (global-company-mode)
    (setq company-global-modes '(not python-mode cython-mode sage-mode)))
  :config (progn
    (global-set-key (kbd "M-/") 'company-complete)
    (setq company-tooltip-limit 20) ; bigger popup window
    (setq company-idle-delay .3)    ; decrease delay before autocompletion popup shows
    (setq company-echo-delay 0)     ; remove annoying blinking
    (global-set-key (kbd "s-/") #'company-try-hard)
    (define-key company-active-map (kbd "s-/") #'company-try-hard)))
#+END_SRC


** Snippets and Templates				       :has_children:

*** Install and enable Yasnippet engine 			    :enabled:

#+BEGIN_SRC emacs-lisp
;; We want on all buffers
(use-package yasnippet 
  :ensure t
  :config
    (yas-global-mode 1))
#+END_SRC
   

*** Configure the file templates				    :enabled:

#+BEGIN_SRC emacs-lisp
(auto-insert-mode)
(setq auto-insert-directory "~/.emacs.d/templates/")
(setq auto-insert-query nil)
#+END_SRC


** Code Lint and Spell Check 					    :enabled:

This section will configure one tool to check the code lint and compliance,
and another to check the spelling and grammar of text buffers.

#+BEGIN_SRC emacs-lisp
(use-package flycheck-pos-tip :ensure t)
(use-package flycheck
  :ensure t
  :commands global-flycheck-mode
  :init (global-flycheck-mode)
  :config (progn
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (setq flycheck-standard-error-navigation nil)
    ;; flycheck errors on a tooltip (doesnt work on console)
    (when (display-graphic-p (selected-frame))
      (eval-after-load 'flycheck
        '(custom-set-variables
        '(flycheck-display-errors-function 
          #'flycheck-pos-tip-error-messages))))))
(add-hook 'text-mode-hook 'turn-on-flyspell)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC


** Personal Keybindings						    :enabled:

This section is reserved to configure my custom keyboard shortcuts.

#+BEGIN_SRC emacs-lisp
;; Edit emacs config
(global-set-key (kbd "s-e") (lambda() 
  (interactive)(find-file "~/.emacs.d/MyConfig.org")))

;; Open my personal org-mode file
(global-set-key (kbd "s-o") (lambda() 
  (interactive)(find-file "~/Documents/Wesley_TODO.org")))

;; Enable the console on ruby
(global-set-key (kbd "s-r") (lambda()(interactive)
  (inf-ruby)
  (shrink-window 16)
  (other-window -1)
  (robe-start)
  (robe-mode)))

;; Change the window's size
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)

;; Cycle windows with C-x Up, C-x Down
(global-set-key (kbd "C-x <up>") 'other-window)
(global-set-key (kbd "C-x <down>") 'other-window)
(global-set-key (kbd "C-x C-<up>") 'other-window)
(global-set-key (kbd "C-x C-<down>") 'other-window)
#+END_SRC


** Development and Languages 				       :has_children:

Here most of the magic happens.
There are packages, configurations and adjustments for 
individual languages set here.

*** ruby-mode 							    :enabled:

#+BEGIN_SRC emacs-lisp
;; First, we need to ensure the ruby-mode is available
(use-package enh-ruby-mode
  :ensure t
  :mode 
    (("Gemfile\\'" . enh-ruby-mode)
    ("Kirkfile\\'" . enh-ruby-mode)
    ("Rakefile\\'" . enh-ruby-mode)
    ("Vagrantfile\\'" . enh-ruby-mode)
    ("\\.builder\\'" . enh-ruby-mode)
    ("\\.gemspec\\'" . enh-ruby-mode)
    ("\\.irbrc\\'" . enh-ruby-mode)
    ("\\.pryrc\\'" . enh-ruby-mode)
    ("\\.rake\\'" . enh-ruby-mode)
    ("\\.rjs\\'" . enh-ruby-mode)
    ("\\.ru\\'" . enh-ruby-mode)
    ("\\.rb\\'" . enh-ruby-mode)
    ("\\.rxml\\'" . enh-ruby-mode)))

;; Now, lets choose what will be loaded on ruby-mode
(add-hook 'enh-ruby-mode-hook (lambda ()
  ;; Installing and loading
  (use-package rvm :ensure t :config (rvm-use-default))
  (use-package inf-ruby :ensure t) 
  (use-package company-inf-ruby :ensure t)
  (use-package ruby-hash-syntax :ensure t)
  (use-package bundler :ensure t)
  (use-package rubocop :ensure t :config (rubocop-mode))
  (use-package robe :ensure t)
))
#+END_SRC
*** org-mode							    :enabled:

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda ()
  (defun add-pcomplete-to-capf ()
    (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))
  #'add-pcomplete-to-capf
  (org-set-local 'yas/trigger-key [tab])
  (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)
  (setq org-support-shift-select 't)
  (use-package ox-reveal :ensure t)
  (use-package ox-impress-js :ensure t)
  (use-package org-jekyll :ensure t)
  (use-package org-magit :ensure t)
  (use-package org-present :ensure t)
  (setq company-backends '(company-capf))))
#+END_SRC
*** dockerfile-mode						    :enabled:
 
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode :ensure t)
(use-package docker :ensure t)
(add-hook 'dockerfile-mode-hook (lambda ()
  (define-auto-insert "Dockerfile" "Dockerfile")
  (auto-insert)
))
#+END_SRC
*** elixir-mode							    :enabled:

#+BEGIN_SRC emacs-lisp
(use-package elixir-mode :ensure t)
(use-package elixir-mix :ensure t)
(use-package elixir-yasnippets :ensure t)
(use-package alchemist :ensure t)
#+END_SRC
*** yaml-mode							    :enabled:

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode :ensure t)
#+END_SRC
*** markdown-mode						    :enabled:

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode :ensure t)
#+END_SRC
*** gherkin-mode						    :enabled:

#+BEGIN_SRC emacs-lisp
(use-package gherkin-mode :ensure t)
(use-package feature-mode :ensure t
  :mode ("\\.feature$" . feature-mode))
#+END_SRC
*** web-mode							    :enabled:

#+BEGIN_SRC emacs-lisp
(use-package web-mode :ensure t)
#+END_SRC
*** ansible							    :enabled:
To help writing ansible playbooks, there are some modules like ansible-mode and ansible-doc.
#+BEGIN_SRC emacs-lisp
(use-package ansible :ensure t)  
(add-hook 'ansible-hook (lambda () 
  (use-package ansible-doc :ensure t)
  (use-package company-ansible :ensure t)
  (add-to-list 'company-backends 'company-ansible)
))
#+END_SRC
*** magit							    :enabled:
#+BEGIN_SRC emacs-lisp
(use-package magit 
:ensure t)
#+END_SRC
*** javascript							    :enabled:
json-mode js2-mode js3-mode jquery-doc 
#+BEGIN_SRC emacs-lisp
(use-package json-mode :ensure t)
#+END_SRC
*** lorem-ipsum							   :noexport:
#+BEGIN_SRC emacs-lisp
(use-package lorem-ipsum
:ensure t)
#+END_SRC
*** jekyll-modes						   :noexport:
hyde
#+BEGIN_SRC emacs-lisp
(use-package jekyll-modes 
:ensure t)
#+END_SRC
*** haml-mode							   :noexport:
#+BEGIN_SRC emacs-lisp
(use-package haml-mode 
:ensure t)
#+END_SRC
*** eruby-mode							   :noexport:
#+BEGIN_SRC emacs-lisp
;;(use-package eruby-mode
;;:ensure t)
#+END_SRC
*** erlang							   :noexport:
#+BEGIN_SRC emacs-lisp
(use-package erlang
:ensure t)
#+END_SRC
*** csv-mode							   :noexport:
csv-nav
#+BEGIN_SRC emacs-lisp
(use-package csv-mode
:ensure t)
(use-package csv-nav 
:ensure t)
#+END_SRC
*** puppet-mode							   :noexport:
puppetfile-mode 
#+BEGIN_SRC emacs-lisp
(use-package puppet-mode 
:ensure t)
(use-package puppetfile-mode
:ensure t)
#+END_SRC
*** arduino-mode						    :enabled:
#+BEGIN_SRC emacs-lisp
(use-package arduino-mode :ensure t)
(setq auto-mode-alist (cons '("\\.\\(pde\\|ino\\)$" . arduino-mode) auto-mode-alist))
(autoload 'arduino-mode "arduino-mode" "Arduino editing mode." t)
(rainbow-mode -1)
(g-rainbow-mode -1)
#+END_SRC
